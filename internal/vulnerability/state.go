package vulnerability

import (
	"strings"
)

// State represents the state of a vulnerability, as defined by the Gitlab API.
type State string

const (
	StateDetected  State = "detected"
	StateResolved  State = "resolved"
	StateDismissed State = "dismissed"
)

// ToState converts a string to a State, returning StateDetected if the string is not recognized.
func ToState(state string) State {
	switch strings.ToLower(state) {
	case "detected":
		return StateDetected
	case "resolved":
		return StateResolved
	case "dismissed":
		return StateDismissed
	}
	return StateDetected
}

// ToStates converts a slice of strings to a slice of States.
func ToStates(states []string) []State {
	result := make([]State, 0)
	for _, state := range states {
		result = append(result, ToState(state))
	}
	return result
}

// ContainsState checks if a slice of States contains a specific State, returning true if it does.
func ContainsState(state State, states []State) bool {
	for _, s := range states {
		if s == state {
			return true
		}
	}
	return false
}
