package vulnerability_test

import (
	"testing"

	"github.com/Method-Security/gitlabctl/internal/vulnerability"
)

func TestToSeverity(t *testing.T) {
	tests := []struct {
		name  string
		input string
		want  vulnerability.Severity
	}{
		{name: "Test Unknown", input: "unknown", want: vulnerability.SeverityUnknown},
		{name: "Test Info", input: "info", want: vulnerability.SeverityInfo},
		{name: "Test Low", input: "low", want: vulnerability.SeverityLow},
		{name: "Test Medium", input: "Medium", want: vulnerability.SeverityMedium},
		{name: "Test High", input: "high", want: vulnerability.SeverityHigh},
		{name: "Test Critical", input: "CRITICAL", want: vulnerability.SeverityCritical},
	}

	for _, test := range tests {
		result := vulnerability.ToSeverity(test.input)
		if result != test.want {
			t.Errorf("%s: ToSeverity(%s) = %s, want %s", test.name, test.input, result, test.want)
		}
	}
}

func TestToSeverities(t *testing.T) {
	tests := []struct {
		name       string
		input      []string
		wantOutput []vulnerability.Severity
	}{
		{
			name:       "Test Empty Input",
			input:      []string{},
			wantOutput: []vulnerability.Severity{},
		},
		{
			name:       "Test Single Severity",
			input:      []string{"low"},
			wantOutput: []vulnerability.Severity{vulnerability.SeverityLow},
		},
		{
			name:       "Test Multiple Severities",
			input:      []string{"info", "medium", "high"},
			wantOutput: []vulnerability.Severity{vulnerability.SeverityInfo, vulnerability.SeverityMedium, vulnerability.SeverityHigh},
		},
	}

	for _, test := range tests {
		result := vulnerability.ToSeverities(test.input)
		if len(result) != len(test.wantOutput) {
			t.Errorf("%s: ToSeverities(%v) returned %v, want %v", test.name, test.input, result, test.wantOutput)
			continue
		}
		for i := range result {
			if result[i] != test.wantOutput[i] {
				t.Errorf("%s: ToSeverities(%v) returned %v, want %v", test.name, test.input, result, test.wantOutput)
				break
			}
		}
	}
}

func TestContainsSeverity(t *testing.T) {
	tests := []struct {
		name       string
		severity   vulnerability.Severity
		severities []vulnerability.Severity
		want       bool
	}{
		{
			name:       "Test Empty Severities",
			severity:   vulnerability.SeverityLow,
			severities: []vulnerability.Severity{},
			want:       false,
		},
		{
			name:       "Test Severity Not Found",
			severity:   vulnerability.SeverityMedium,
			severities: []vulnerability.Severity{vulnerability.SeverityLow, vulnerability.SeverityHigh},
			want:       false,
		},
		{
			name:       "Test Severity Found",
			severity:   vulnerability.SeverityHigh,
			severities: []vulnerability.Severity{vulnerability.SeverityLow, vulnerability.SeverityMedium, vulnerability.SeverityHigh},
			want:       true,
		},
	}

	for _, test := range tests {
		result := vulnerability.ContainsSeverity(test.severity, test.severities)
		if result != test.want {
			t.Errorf("%s: ContainsSeverity(%s, %v) = %t, want %t", test.name, test.severity, test.severities, result, test.want)
		}
	}
}
