package cmd

import (
	"github.com/Method-Security/gitlabctl/internal/vulnerability"
	"github.com/spf13/cobra"
)

// InitVulnerabilityCmd initializes the vulnerability command for the gitlabctl CLI. This command sets up the flags for the
// command, parsing the provided state and severity filters before passing them to the vulnerability package for enumeration.
func (a *Gitlabctl) InitVulnerabilityCmd() {
	projectID := 0
	severities := make([]string, 0)
	states := make([]string, 0)
	a.VulnerabilityCmd = &cobra.Command{
		Use:     "vulnerabilities",
		Short:   "Enumerate Gitlab vulnerabilities",
		Long:    `Enumerate Gitlab vulnerabilities`,
		Aliases: []string{"vulns"},
		Run: func(cmd *cobra.Command, args []string) {
			opts, err := vulnerability.NewEnumerateSecurityVulnerabilitiesOptions(projectID, states, severities)
			if err != nil {
				errorMessage := err.Error()
				a.OutputSignal.ErrorMessage = &errorMessage
				a.OutputSignal.Status = 1
				return
			}
			report, err := vulnerability.EnumerateSecurityVulnerabilities(cmd.Context(), a.RootFlags.BaseURL, opts, a.GitlabClient)
			if err != nil {
				errorMessage := err.Error()
				a.OutputSignal.ErrorMessage = &errorMessage
				a.OutputSignal.Status = 1
			}
			a.OutputSignal.Content = report
		},
	}
	a.VulnerabilityCmd.Flags().IntVar(&projectID, "project", 0, "Project ID")
	a.VulnerabilityCmd.Flags().StringSliceVar(&states, "states", []string{}, "Vulnerability states. Valid values are 'detected', 'dismissed', 'resolved'. If no values are provided, 'detected' will be used by default.")
	a.VulnerabilityCmd.Flags().StringSliceVar(&severities, "severities", []string{}, "Vulnerability severities. Valid values are 'unknown', 'info', 'low', 'medium', 'high', 'critical'.")
	a.RootCmd.AddCommand(a.VulnerabilityCmd)
}
