var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"gitlabctl Documentation","text":"<p>Hello and welcome to the gitlabctl documentation. While we always want to provide the most comprehensive documentation possible, we thought you may find the below sections a helpful place to get started.</p> <ul> <li>The Getting Started section provides onboarding material</li> <li>The Development header is the best place to get started on developing on top of and with gitlabctl</li> <li>See the Docs section for a comprehensive rundown of gitlabctl capabilities</li> </ul>"},{"location":"index.html#about-gitlabctl","title":"About gitlabctl","text":"<p>gitlabctl offers security teams a way to tie Gitlab primitives into their security workflows, ensuring that they leverage those primitives within their security automation pipelines. Designed with data-modeling and data-integration needs in mind, gitlabctl can be used on its own as an interactive CLI, orchestrated as part of a broader data pipeline, or leveraged from within the Method Platform.</p> <p>The types of scans that gitlabctl can conduct are constantly growing. For the most up to date listing, please see the documentation here</p> <p>To learn more about gitlabctl, please see the Documentation site for the most detailed information.</p>"},{"location":"index.html#quick-start","title":"Quick Start","text":""},{"location":"index.html#get-gitlabctl","title":"Get gitlabctl","text":"<p>For the full list of available installation options, please see the Installation page. For convenience, here are some of the most commonly used options:</p> <ul> <li><code>docker run methodsecurity/gitlabctl</code></li> <li><code>docker run ghcr.io/method-security/gitlabctl</code></li> <li>Download the latest binary from the Github Releases page</li> <li>Installation documentation</li> </ul>"},{"location":"index.html#authentication","title":"Authentication","text":"<p>gitlabctl takes advantage of Gitlab's Personal Access Tokens to authenticate to the Gitlab instance. This token will need to be passed to the gitlabctl command you wish to call, and can be handled in one of two ways.</p> <ol> <li>Set a <code>GITLAB_TOKEN</code> environment variable with a value equal to the token's value</li> <li>Pass the token in as an argument via the <code>--token</code> flag.</li> <li>Note that this is not recommended in production scenarios as you should avoid having your token logged in your command line history.</li> </ol>"},{"location":"index.html#general-usage","title":"General Usage","text":"<pre><code>gitlabctl portscan &lt;target&gt;\n</code></pre>"},{"location":"index.html#examples","title":"Examples","text":"<pre><code>gitlabctl projects --group-id &lt;group&gt; --mine false --base-url https://gitlab.com/api/v4\n</code></pre>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>Interested in contributing to gitlabctl? Please see our organization wide Contribution page.</p>"},{"location":"index.html#want-more","title":"Want More?","text":"<p>If you're looking for an easy way to tie gitlabctl into your broader cybersecurity workflows, or want to leverage some autonomy to improve your overall security posture, you'll love the broader Method Platform.</p> <p>For more information, visit us here</p>"},{"location":"index.html#community","title":"Community","text":"<p>gitlabctl is a Method Security open source project.</p> <p>Learn more about Method's open source source work by checking out our other projects here or our organization wide documentation here.</p> <p>Have an idea for a Tool to contribute? Open a Discussion here.</p>"},{"location":"community/community.html","title":"Contributing","text":"<p>For more information on how to get involved in the Method community, please see our organization wide documentation:</p> <ul> <li>Discussions</li> <li>Issues</li> <li>Pull Requests</li> </ul>"},{"location":"development/adding.html","title":"Adding a new capability","text":"<p>By design, gitlabctl breaks every unique network scan into its own top level command. If you are looking to add a brand new capability to the tool, you can take the following steps.</p> <ol> <li>Add a file to <code>cmd/</code> that corresponds to the sub-command name you'd like to add to the <code>gitlabctl</code> CLI</li> <li>You can use <code>cmd/projects.go</code> as a template</li> <li>Your file needs to be a member function of the <code>gitlabctl</code> struct and should be of the form <code>Init&lt;cmd&gt;Command</code></li> <li>Add a new member to the <code>gitlabctl</code> struct in <code>cmd/root.go</code> that corresponsds to your command name. Remember, the first letter must be capitalized.</li> <li>Call your <code>Init</code> function from <code>main.go</code></li> <li>Add logic to your commands runtime and put it in its own package within <code>internal</code> (e.g., <code>internal/projects</code>)</li> </ol>"},{"location":"development/principles.html","title":"Project Principles","text":""},{"location":"development/principles.html#pre-run-run-post-run","title":"Pre-run -&gt; Run -&gt; Post-run","text":"<p>In the root command, we set a <code>PersistentPreRunE</code> and <code>PersistentPostRunE</code> function that is responsible for initializing the output format and Signal data (in the pre-run) and then write that data in the proper format (in the post-run).</p> <p>Within the Run command that every command must implement, the output of the collected data needs to be written back to the struct's <code>OutputSignal.Content</code> value in order to be properly written out to the caller.</p>"},{"location":"development/principles.html#cmd-vs-internal","title":"Cmd vs Internal","text":"<p>By design, the functionality within each command should focus around parsing the variety of flags and options that the command may need to control capability, passing off all real logic into internal modules.</p>"},{"location":"development/setup.html","title":"Development Setup","text":""},{"location":"development/setup.html#adding-a-new-capability","title":"Adding a new capability","text":"<p>To add a new scan to gitlabctl, providing new enumeration capabilities to security operators everywhere, please see the adding a new capability page.</p>"},{"location":"development/setup.html#setting-up-your-development-environment","title":"Setting up your development environment","text":"<p>If you've just cloned gitlabctl for the first time, welcome to the community! We use Palantir's godel to streamline local development and goreleaser to handle the heavy lifting on the release process.</p> <p>To get started with godel, you can run</p> <pre><code>./godelw verify\n</code></pre> <p>This will run a number of checks for us, including linters, tests, and license checks. We run this command as part of our CI pipeline to ensure the codebase is consistently passing tests.</p>"},{"location":"development/setup.html#building-the-cli","title":"Building the CLI","text":"<p>We can use godel to build our CLI locally by running</p> <pre><code>./godelw build\n</code></pre> <p>You should see output in <code>out/build/gitlabctl/&lt;version&gt;/&lt;os&gt;-&lt;arch&gt;/gitlabctl</code>.</p> <p>If you'd like to clean this output up, you can run</p> <pre><code>./godelw clean\n</code></pre>"},{"location":"development/setup.html#testing-releases-locally","title":"Testing releases locally","text":"<p>We can use goreleaser locally as well to test our builds. As gitlabctl uses cosign to sign our artifacts and Docker containers during our CI pipeline, we'll want to skip this step when running locally.</p> <pre><code>goreleaser release --snapshot --clean --skip sign\n</code></pre> <p>This should output binaries, distributable tarballs/zips, as well as docker images to your local machine's Docker registry.</p>"},{"location":"docs/index.html","title":"Capabilities","text":"<p>gitlabctl integrates with the Gitlab API to provide security teams with insights into Gitlab primitives and security concepts, allowing teams to leverage the valuable data that Gitlab is generating about their projects. Each of the below pages offers an in depth look at a specific gitlabctl capability related to a different facet of Gitlab that can be enumerated.</p> <ul> <li>Projects</li> <li>Vulnerabilities</li> </ul>"},{"location":"docs/index.html#top-level-flags","title":"Top Level Flags","text":"<p>gitlabctl has several top level flags that can be used on any subcommand. These include:</p> <pre><code>Flags:\n      --base-url string      Base URL for Gitlab API. (e.g. https://gitlab.com/api/v4)\n  -h, --help                 help for gitlabctl\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --token string         Gitlab Access Token. Can also be set via GITLAB_TOKEN environment variable\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/index.html#version-command","title":"Version Command","text":"<p>Run <code>gitlabctl version</code> to get the exact version information for your binary</p>"},{"location":"docs/index.html#output-formats","title":"Output Formats","text":"<p>For more information on the various output formats that are supported by gitlabctl, see the Output Formats page in our organization wide documentation.</p>"},{"location":"docs/projects.html","title":"Projects","text":"<p>The <code>gitlabctl projects</code> command provides information about Gitlab projects (i.e. repositories) that your token has access to. This project information is a critical element of automating a variety of static code analysis workflows.</p>"},{"location":"docs/projects.html#usage","title":"Usage","text":"<pre><code>gitlabctl projects --base-url https://gitlab.com/api/v4 --group-id &lt;group id&gt; --output json\n</code></pre>"},{"location":"docs/projects.html#help-text","title":"Help Text","text":"<pre><code>$ gitlabctl projects -h\nEnumerate Gitlab projects\n\nUsage:\n  gitlabctl projects [flags]\n\nFlags:\n      --archived          Include archived projects\n      --group-id string   Group ID\n  -h, --help              help for projects\n      --mine              Include only projects owned by the authenticated user. (default true)\n\nGlobal Flags:\n      --base-url string      Base URL for Gitlab API. (e.g. https://gitlab.com/api/v4)\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --token string         Gitlab Access Token. Can also be set via GITLAB_TOKEN environment variable\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/vulnerabilities.html","title":"Vulnerabilities","text":"<p>The <code>gitlabctl vulnerabilities</code> command allows you to leverage Gitlab's application security capabilities within your automation workflows, ensuring your team has visibility into the entire swathe of vulnerabilities that affect your applications.</p>"},{"location":"docs/vulnerabilities.html#usage","title":"Usage","text":"<pre><code>gitlabctl vulnerabilities --base-url https://gitlab.com/api/v4 --project &lt;project id&gt; --output json\n</code></pre>"},{"location":"docs/vulnerabilities.html#help-text","title":"Help Text","text":"<pre><code>$ gitlabctl vulnerabilities -h\nEnumerate Gitlab vulnerabilities\n\nUsage:\n  gitlabctl vulnerabilities [flags]\n\nAliases:\n  vulnerabilities, vulns\n\nFlags:\n  -h, --help                 help for vulnerabilities\n      --project int          Project ID\n      --severities strings   Vulnerability severities. Valid values are 'unknown', 'info', 'low', 'medium', 'high', 'critical'.\n      --states strings       Vulnerability states. Valid values are 'detected', 'dismissed', 'resolved'. If no values are provided, 'detected' will be used by default.\n\nGlobal Flags:\n      --base-url string      Base URL for Gitlab API. (e.g. https://gitlab.com/api/v4)\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --token string         Gitlab Access Token. Can also be set via GITLAB_TOKEN environment variable\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"getting-started/basic-usage.html","title":"Basic Usage","text":""},{"location":"getting-started/basic-usage.html#binaries","title":"Binaries","text":"<p>Running as a binary simplifies the process of providing authentication credentials to your gitlabctl command.</p> <p>You can validate that the binary is working by generating a token for you Gitlab instance and running the following.</p> <pre><code>gitlabctl projects --base-url https://gitlab.com/api/v4 --group-id &lt;group id&gt; --output json\n</code></pre> <p>This will show you all the projects that you own in the provided Group ID.</p>"},{"location":"getting-started/basic-usage.html#docker","title":"Docker","text":"<p>Running a gitlabctl command in Docker should work the same as when ran as a binary, you just need to provide the credential to the container. If you already have your <code>GITLAB_TOKEN</code> environment variable set in your local shell, you can then run.</p> <pre><code>docker run \\\n  -e GITLAB_TOKEN=$GITLAB_TOKEN \\\n  ghcr.io/method-security/gitlabctl \\\n  projects \\\n  --base-url https://gitlab.com/api/v4 \\\n  --group-id &lt;group id&gt; \\\n  --output json\n</code></pre>"},{"location":"getting-started/installation.html","title":"Getting Started","text":"<p>If you are just getting started with gitlabctl, welcome! This guide will walk you through the process of going zero to one with the tool.</p>"},{"location":"getting-started/installation.html#installation","title":"Installation","text":"<p>gitlabctl is provided in several convenient form factors, including statically compiled binary images on a variety of architectures as well as a Docker image for both x86 and ARM machines.</p> <p>If you do not see an architecture that you require, please open a Discussion to propose adding it.</p>"},{"location":"getting-started/installation.html#binaries","title":"Binaries","text":"<p>gitlabctl currently supports statically compiled binaries across the following operating systems and architectures:</p> OS Architecture Linux 386 Linux arm (goarm 7) Linux amd64 Linux arm64 MacOS amd64 MacOS arm64 Windows amd64 <p>The latest binaries can be downloaded directly from Github.</p>"},{"location":"getting-started/installation.html#docker","title":"Docker","text":"<p>Docker images for gitlabctl are hosted in both Github Container Registry as well as on Docker Hub and can be pulled via:</p> <pre><code>docker pull ghcr.io/method-security/gitlabctl\n</code></pre> <pre><code>docker pull methodsecurity/gitlabctl\n</code></pre>"}]}